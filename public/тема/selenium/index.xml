<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>selenium | Блог Снайпера</title>
    <link>https://snayp.github.io/%D1%82%D0%B5%D0%BC%D0%B0/selenium/</link>
      <atom:link href="https://snayp.github.io/%D1%82%D0%B5%D0%BC%D0%B0/selenium/index.xml" rel="self" type="application/rss+xml" />
    <description>selenium</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><lastBuildDate>Mon, 30 Nov 2020 05:10:51 +0300</lastBuildDate>
    <image>
      <url>https://snayp.github.io/img/qa-blog-512x512.png</url>
      <title>selenium</title>
      <link>https://snayp.github.io/%D1%82%D0%B5%D0%BC%D0%B0/selenium/</link>
    </image>
    
    <item>
      <title>Знакомство Cucumber и BDD и TDD подхода. Начало.</title>
      <link>https://snayp.github.io/%D0%B1%D0%BB%D0%BE%D0%B3/%D0%BE%D0%BF%D1%8B%D1%82-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-cucumber-%D0%B8-bdd-%D0%BF%D0%BE%D0%B4%D1%85%D0%BE%D0%B4%D0%B0-%D0%BF%D1%80%D0%B8-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B5-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/</link>
      <pubDate>Mon, 30 Nov 2020 05:10:51 +0300</pubDate>
      <guid>https://snayp.github.io/%D0%B1%D0%BB%D0%BE%D0%B3/%D0%BE%D0%BF%D1%8B%D1%82-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-cucumber-%D0%B8-bdd-%D0%BF%D0%BE%D0%B4%D1%85%D0%BE%D0%B4%D0%B0-%D0%BF%D1%80%D0%B8-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B5-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/</guid>
      <description>




  &lt;h2 id=&#34;знакомство-с-bdd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#знакомство-с-bdd&#34; title=&#39; &#34;Знакомство с BDD&#34;.&#39;&gt;&lt;svg aria-hidden=&#34;true&#34;&gt;&lt;use xlink:href=&#34;#hashtag&#34;/&gt;&lt;/svg&gt;&lt;/a&gt; Знакомство с BDD&lt;/h2&gt; 






  
  











&lt;figure class=&#34;small&#34; id=&#34;figure-bdd---мнения-за-и-против-best-practicies-и-anti-patterns&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../../%D0%B1%D0%BB%D0%BE%D0%B3/%D0%BE%D0%BF%D1%8B%D1%82-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-cucumber-%D0%B8-bdd-%D0%BF%D0%BE%D0%B4%D1%85%D0%BE%D0%B4%D0%B0-%D0%BF%D1%80%D0%B8-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B5-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/header_hu7907faaef7e9e2a11d2683d026425d0b_271474_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;BDD - мнения за и против, best practicies и anti patterns.&#34;&gt;


  &lt;img data-src=&#34;../../%D0%B1%D0%BB%D0%BE%D0%B3/%D0%BE%D0%BF%D1%8B%D1%82-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-cucumber-%D0%B8-bdd-%D0%BF%D0%BE%D0%B4%D1%85%D0%BE%D0%B4%D0%B0-%D0%BF%D1%80%D0%B8-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B5-%D1%87%D0%B0%D1%81%D1%82%D1%8C-1/header_hu7907faaef7e9e2a11d2683d026425d0b_271474_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;Behaviour Driven Development (BDD) - командное обсуждение существенных детелей проекта, позволяющее добиться однозначного понимания будущих изменений у всех членов команды.&#34; width=&#34;2405&#34; height=&#34;1173&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    BDD - мнения за и против, best practicies и anti patterns.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;О фреймворке 
&lt;a href=&#34;https://cucumber.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cucumber&lt;/a&gt;, я узнал, примерно 7 лет назад. Увлечение фреймворком Ruby on Rails первое упоминание гибких методов разработки, сформулированные группой и сразу оценил возможность в 10 строчек написать e2e тест, основанного спеке. Написанной разговорным зяком, до написания и описывающее реальное использование возможностей системы, по всем канонам BDD/TDD подходов. Тест сразу мог запускался в headless версии браузера и только для отладки переключаться на полноценную версию. RoR подразумевает написание большого количества тестов из всех ступеней пирамиды тестирования и развила очень мощный инструментарий для тестов и проверок, которые могут понадобиться 90% создаваемых приложений. Сами принципы, которым рекомендуют следовать абрревиатуры BDD &amp;amp; TDD при организации процесса разработки и которым нужно придерживаются всем членам команды, смогли выразить весь накопленный опыт в программировании полученный при создании сложнейшего ПО, решающего задачи не доступные раньше для человека, изменили отношение к классическим источника дохода и перераспредение ресурсов в пользу цифровых я узнал благодаря передовому взгляду и инновацционному отношениею к процессам в командах, заинтересованных получить инструмент для оптимизации и упрощения издержен бизнеса и увеличить прибыль компании. Затраты на внедрение этих правил и рекомендаций, в несколько раз окупятся в долгосрочном проекте, в первый год развития. Неизменно следовать основым идеям, позволит получить максимальную уверенность в качестве и правильной работоспосоюности всего реализованного функционала, который описан и задокументирован разговорным языком в объеме достаточном для понимая всей доступной логики.&lt;/p&gt;
&lt;p&gt;При первом знакомстве с гибкими подходами в разработке, приносящими множество улучшений в команде, которые позволят иметь единое представление у всех участников, о функциях и параметрах которые появятся, в будующем, через значительный промежок времени. Но и без этого же мы создавали надежное ПО для гигантских вычислений? Перспективы техник не были , в 2016 года в отечественной разработке массого использования не оценить по достуинству возможности предлагаемыми BDD &amp;amp; TDD методологиями и начать их применять на практике. Сразу стоит оговориться, что до сих пор споры на тему применимости данных подходов и реального профита для команды, не утихли и продожаются среди сторонников и противников в среде тестировщиков-автоматизаторов.&lt;/p&gt;
&lt;p&gt;В следующий раз я столкнулся с синтаксисом Given, When, Then уже при написании тестов на REST API используя Java и библиотеку 
&lt;a href=&#34;http://rest-assured.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rest-Assured&lt;/a&gt;. Тесты выглядели примерно так и кроме  синтаксиса от BDD не заимствовали ничего лишнего.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/snayp/c41875f9b2aa729ee29b32e13cc5205c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;
&lt;a href=&#34;https://automated-testing.info/t/code-recipe-primer-ispolzovaniya-rest-assured-dlya-avtomatizaczii-restfull-api/24599?u=snayp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Выложил больше примеров с описанием, что делают тесты&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Затем, при автоматизации Websocket API пришлось использовать JavaScript инструменты - 
&lt;a href=&#34;https://jasmine.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jasmine&lt;/a&gt; + 
&lt;a href=&#34;https://karma-runner.github.io/latest/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Karma&lt;/a&gt;. Jasmine - BDD фреймворк, который &amp;ldquo;из коробки&amp;rdquo; имеет все необходимое для тестировани JavaScript кода. Не зависит ни каких сторонних npm модулей, потому очень шустрый. В моем случае, он был очень удобен по двум причинам:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;для тестирования ассинхронного WebSocket API JavaScript оказался гораздо приспособленней, чем Java;&lt;/li&gt;
&lt;li&gt;парсить JSON объекты JavaScript&amp;rsquo;ом, намного легче, чем возиться с Java объектами;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Возможности BDD, снова никакой роли не играли. Тут хочу мельком сказать про свое первое знакомство с магией Promise, Поскольку тесты подразумевали несколько последовательных вызовов API, где каждый последующий вызов использовал результаты предыдущего, то очень быстро код стал абсолютно не читаемым из-за огромного числа вложенных callback&amp;rsquo;ов.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wsApi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessage&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;linktourist&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;linkQuery&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;wsApi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessage&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unlinktourist&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;linkQuery&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;wsApi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessage&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;person&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delete&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;personId&lt;/span&gt;}, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;wsApi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessage&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delete&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;service&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;serviceId&lt;/span&gt;}, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;wsApi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessage&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delete&amp;#34;&lt;/span&gt;, {&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;orderId&lt;/span&gt;}, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;();
                });
            });
        });
    });
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Хоть IntelliJIDEA и мощнейший редактор текста, но искать, где же пропущена одна скобка или точка с зяпятой, было просто не выносимо. Тогда я первый раз узнал про Linter&amp;rsquo;ы, это тоже отдельная тема, которой будет посвящен пост в будущем. Сокральный смысл Promise я тогда не понял, а вот возможность отрефакторить код, чтобы он был выровнен по левому краю, оценил сразу!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dry cleaning&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inDate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date().&lt;span style=&#34;color:#a6e22e&#34;&gt;getTime&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outDate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date().&lt;span style=&#34;color:#a6e22e&#34;&gt;getTime&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;searchQuery&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;place&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HO000288TR&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#a6e22e&#34;&gt;date&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inDate&lt;/span&gt;,
                &lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outDate&lt;/span&gt;,
                &lt;span style=&#34;color:#a6e22e&#34;&gt;intime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43200000&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// 12:00
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;outtime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50400000&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 14:00
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            },
            &lt;span style=&#34;color:#a6e22e&#34;&gt;families&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
                {
                    &lt;span style=&#34;color:#a6e22e&#34;&gt;adults&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                }
            ]
        };
 {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toBeNull&lt;/span&gt;();
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extras&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toBeNull&lt;/span&gt;();
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extras&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toBeGreaterThan&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extras&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toBe&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);

                &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extras&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toBeNull&lt;/span&gt;();
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toBe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DRY&amp;#34;&lt;/span&gt;);
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toBeNull&lt;/span&gt;();
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toBe&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commerce&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;offer&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toBe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extraOffer&lt;/span&gt;);
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commerce&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;original&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toBeNull&lt;/span&gt;();
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commerce&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payment&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toBeNull&lt;/span&gt;();
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commerce&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;currency&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toBeNull&lt;/span&gt;();
                &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commerce&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;currency&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toBe&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;978&lt;/span&gt;);

                &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;();
            });
        };
        
        &lt;span style=&#34;color:#a6e22e&#34;&gt;paginationQuery&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;searchQuery&lt;/span&gt;);
    }, &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;);
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Итого, за первые 5 лет моего знакомства с термином Behaviour Driven Development (BDD), так и не возникло насущной необходимости, благодаря который я бы смог подробнее разобраться, зачем же еще что то новое придумали и смог бы применить новый подход в своей работе.&lt;/p&gt;
&lt;p&gt;В следующей части будет рассказ, о том, как же я все таки осознал, как и зачем можно использовать BDD и даже нашел задачу, где предложенные методы, могли реально упростить разработку, а точнее, что описание конкретного кейса на естественном языке, действительно помогает понять смысл разрабатываемого функционала всем членам команды и не тратить ресуры на реализацию сомнительнего функционала.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
